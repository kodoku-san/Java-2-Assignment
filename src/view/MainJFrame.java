/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controllers.EmployeeDAO;
import database.XFile;
import models.Employee;
import java.awt.Color;
import java.awt.Image;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import models.PEmployee;

/**
 *
 * @author Asus
 */
public class MainJFrame extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form MainJFrame
     */
    private DefaultTableModel model;
    private String pathImg = "", pathFile = "C:\\Users\\Asus\\Desktop\\FPT POLYTECHNIC\\Java-FPTPoly - 2\\PS17588_HOHOANGPHU_ASM\\employee.dat";
    private EmployeeDAO employeeDAO;

    public MainJFrame() {
        initComponents();
        pane_border.setBackground(Color.gray);
        pane_img.setBackground(Color.white);
        pane_border_btns.setBackground(Color.white);
        lbl_img.setHorizontalAlignment(SwingConstants.CENTER);
        lbl_img.setVerticalAlignment(SwingConstants.CENTER);
        employeeDAO = new EmployeeDAO();
        model = (DefaultTableModel) table_nv.getModel();
        Thread t1 = new Thread(this);
        t1.start();
        setDefaultLookAndFeelDecorated(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        pane_border = new javax.swing.JPanel();
        pane_background = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txt_manv = new javax.swing.JTextField();
        txt_name = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txt_age = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txt_mail = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txt_salary = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        label_time = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        label_record = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_nv = new javax.swing.JTable();
        pane_img = new javax.swing.JPanel();
        lbl_img = new javax.swing.JLabel();
        pane_border_btns = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        btn_new = new javax.swing.JButton();
        btn_save = new javax.swing.JButton();
        btn_del = new javax.swing.JButton();
        btn_find = new javax.swing.JButton();
        btn_open = new javax.swing.JButton();
        btn_exit = new javax.swing.JButton();
        btn_open1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        rdo_nam = new javax.swing.JRadioButton();
        rdo_nu = new javax.swing.JRadioButton();
        cbb_po = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("QUẢN LÍ NHÂN VIÊN");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("QUẢN LÍ NHÂN VIÊN");

        jLabel2.setText("MÃ NHÂN VIÊN");

        jLabel3.setText("HỌ VÀ TÊN");

        jLabel4.setText("TUỔI");

        jLabel5.setText("EMAIL");

        jLabel6.setText("LƯƠNG");

        label_time.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        label_time.setForeground(new java.awt.Color(255, 0, 0));
        label_time.setText("12:00 AM");

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setText("|<");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton2.setText("<<");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton3.setText(">>");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton4.setText(">|");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        label_record.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        label_record.setForeground(new java.awt.Color(255, 51, 0));
        label_record.setText("Total: 0");

        table_nv.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MÃ", "HỌ VÀ TÊN", "TUỔI", "EMAIL", "LƯƠNG", "GIỚI TÍNH", "CHỨC VỤ", "HÌNH ẢNH"
            }
        ));
        table_nv.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_nvMouseClicked(evt);
            }
        });
        table_nv.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                table_nvKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(table_nv);

        lbl_img.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbl_img.setText("Chọn hình ảnh đại diện");
        lbl_img.setPreferredSize(new java.awt.Dimension(197, 197));
        lbl_img.setRequestFocusEnabled(false);
        lbl_img.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_imgMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout pane_imgLayout = new javax.swing.GroupLayout(pane_img);
        pane_img.setLayout(pane_imgLayout);
        pane_imgLayout.setHorizontalGroup(
            pane_imgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbl_img, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pane_imgLayout.setVerticalGroup(
            pane_imgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbl_img, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
        );

        btn_new.setText("NEW");
        btn_new.setToolTipText("Reset All");
        btn_new.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_newActionPerformed(evt);
            }
        });

        btn_save.setText("SAVE");
        btn_save.setToolTipText("Save hoặc update");
        btn_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveActionPerformed(evt);
            }
        });

        btn_del.setText("DELETE");
        btn_del.setToolTipText("Xóa bỏ");
        btn_del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_delActionPerformed(evt);
            }
        });

        btn_find.setText("FIND");
        btn_find.setToolTipText("Tìm kiếm");
        btn_find.setFocusable(false);
        btn_find.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_findActionPerformed(evt);
            }
        });

        btn_open.setText("OPEN");
        btn_open.setToolTipText("Mở file dữ liệu");
        btn_open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_openActionPerformed(evt);
            }
        });

        btn_exit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_exit.setForeground(new java.awt.Color(255, 102, 102));
        btn_exit.setText("EXIT");
        btn_exit.setToolTipText("Thoát ");
        btn_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_exitActionPerformed(evt);
            }
        });

        btn_open1.setText("SORT");
        btn_open1.setToolTipText("Sắp xếp dữ liệu");
        btn_open1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_open1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_new, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                    .addComponent(btn_save, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_del, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_find, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_open, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_exit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btn_open1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btn_new)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_save)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_del)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_find)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_open)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_open1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(btn_exit)
                .addContainerGap())
        );

        javax.swing.GroupLayout pane_border_btnsLayout = new javax.swing.GroupLayout(pane_border_btns);
        pane_border_btns.setLayout(pane_border_btnsLayout);
        pane_border_btnsLayout.setHorizontalGroup(
            pane_border_btnsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pane_border_btnsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pane_border_btnsLayout.setVerticalGroup(
            pane_border_btnsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pane_border_btnsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel7.setText("GIỚI TÍNH");

        jLabel8.setText("CHỨC VỤ");

        buttonGroup1.add(rdo_nam);
        rdo_nam.setText("NAM");

        buttonGroup1.add(rdo_nu);
        rdo_nu.setText("NỮ");

        cbb_po.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BAOVE", "NHANVIEN", "TRUONGPHONG", "GIAMDOC" }));

        javax.swing.GroupLayout pane_backgroundLayout = new javax.swing.GroupLayout(pane_background);
        pane_background.setLayout(pane_backgroundLayout);
        pane_backgroundLayout.setHorizontalGroup(
            pane_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pane_backgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pane_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pane_backgroundLayout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(label_record, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pane_backgroundLayout.createSequentialGroup()
                        .addGroup(pane_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(pane_backgroundLayout.createSequentialGroup()
                                .addGroup(pane_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pane_backgroundLayout.createSequentialGroup()
                                        .addGap(235, 235, 235)
                                        .addComponent(jLabel1)
                                        .addGap(125, 125, 125)
                                        .addComponent(label_time, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pane_backgroundLayout.createSequentialGroup()
                                        .addGroup(pane_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel5)
                                            .addGroup(pane_backgroundLayout.createSequentialGroup()
                                                .addGroup(pane_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel7)
                                                    .addComponent(jLabel8))
                                                .addGap(60, 60, 60)
                                                .addGroup(pane_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(pane_backgroundLayout.createSequentialGroup()
                                                        .addComponent(rdo_nam, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(rdo_nu))
                                                    .addGroup(pane_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(cbb_po, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(txt_manv, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(txt_name, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(txt_age, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(txt_mail, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                                                        .addComponent(txt_salary, javax.swing.GroupLayout.Alignment.LEADING)))))
                                        .addGap(18, 18, 18)
                                        .addComponent(pane_img, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(12, 12, 12)
                                        .addComponent(pane_border_btns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        pane_backgroundLayout.setVerticalGroup(
            pane_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pane_backgroundLayout.createSequentialGroup()
                .addGroup(pane_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(label_time))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pane_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pane_border_btns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pane_backgroundLayout.createSequentialGroup()
                        .addGroup(pane_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pane_backgroundLayout.createSequentialGroup()
                                .addGroup(pane_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(txt_manv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pane_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(txt_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(15, 15, 15)
                                .addGroup(pane_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(txt_age, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(13, 13, 13)
                                .addGroup(pane_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(txt_mail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pane_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(txt_salary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(pane_img, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pane_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(rdo_nam)
                            .addComponent(rdo_nu))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pane_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbb_po, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))))
                .addGap(18, 18, 18)
                .addGroup(pane_backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(label_record, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(166, 166, 166))
        );

        javax.swing.GroupLayout pane_borderLayout = new javax.swing.GroupLayout(pane_border);
        pane_border.setLayout(pane_borderLayout);
        pane_borderLayout.setHorizontalGroup(
            pane_borderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pane_borderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pane_background, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pane_borderLayout.setVerticalGroup(
            pane_borderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pane_borderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pane_background, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pane_border, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pane_border, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveActionPerformed
        if (table_nv.getSelectedRowCount() == 1) {
            if (table_nv.getRowCount() != 0) {
                updateEmpl();
            } else {
                Message("Đã xảy ra lỗi. Bảng đang rỗng!", 1);
            }
        } else if (txt_age.getText().equals("")
                && txt_mail.getText().equals("")
                && txt_manv.getText().equals("")
                && txt_salary.getText().equals("")
                && txt_name.getText().equals("")
                && !rdo_nam.isSelected()
                && !rdo_nu.isSelected()) {
            if (table_nv.getRowCount() == 0) {
                Message("Bảng đang rỗng!", 1);
            } else {
                try {
                    employeeDAO.writeToFile();
                    Message("Đã lưu dữ liệu vào file!", 0);
                } catch (Exception ex) {
                    Message(ex.getMessage(), 1);
                }
            }
        } else {
            addEmpl();
        }
    }//GEN-LAST:event_btn_saveActionPerformed

    private void btn_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_exitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btn_exitActionPerformed

    private void table_nvMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_nvMouseClicked
        try {
            ArrayList<Employee> list = employeeDAO.getGeneric();
            int index = table_nv.getSelectedRow();
            employeeDAO.setCurrent(index);
            Employee employee = list.get(index);
            setTextInput(employee, -1);
            setRecord(index, list.size());
        } catch (Exception e) {
            Message(e.getMessage(), 1);
        }
    }//GEN-LAST:event_table_nvMouseClicked

    private void btn_delActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_delActionPerformed
        if (table_nv.getRowCount() == 0) {
            Message("Bảng đang rỗng!", 1);
        } else {
            if (table_nv.getSelectedRowCount() == 0) {
                Message("Vui lòng chọn cột cần xóa!", 1);
            } else {
                int prompt = JOptionPane.showConfirmDialog(this, "Bạn có chắc xóa không?", "Message", JOptionPane.INFORMATION_MESSAGE);
                if (prompt == 0) {
                    try {
                        String manv = txt_manv.getText();
                        employeeDAO.delete(manv);
                        ArrayList<Employee> list = employeeDAO.getGeneric();
                        showAllData(list);
                        Message("Xóa thành công!", 0);
                        resetAll();
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, ex.getMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_btn_delActionPerformed

    private void btn_openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_openActionPerformed
        if (XFile.checkEmptyFile(pathFile)) {
            ArrayList<Employee> list = new ArrayList<>();
            try {
                list = employeeDAO.readFromFileGeneric();
            } catch (Exception ex) {
                Message(ex.getMessage(), 1);
            }
            showAllData(list);
            int k = 0;
            for (Employee employee : list) {
                setTextInput(employee, k);
                break;
            }
            label_record.setText("Record: 1 of " + list.size());
            employeeDAO.setCurrent(0);
        } else {
            Message("File dữ liệu đang rỗng!", 1);
            txt_manv.requestFocus();
        }
    }//GEN-LAST:event_btn_openActionPerformed

    private void btn_findActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_findActionPerformed
        ArrayList<Employee> list;
        try {
            list = employeeDAO.getGeneric();
            if (!list.isEmpty()) {
                String t = JOptionPane.showInputDialog("Nhập mã nhân viên cần tìm");
                int k = employeeDAO.search(t);
                if (k > -1) {
                    setTextInput(list.get(k), k);
                    employeeDAO.setCurrent(k);
                    setRecord(k, list.size());
                } else if (t != null && !t.equals("")) {
                    Message("Không tìm thấy nhân viên: " + t, 1);
                }
            } else {
                Message("Chưa có dữ liệu!", 1);
            }
        } catch (Exception ex) {
            Message(ex.getMessage(), 1);
        }
    }//GEN-LAST:event_btn_findActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            int index = goTo("first");
            ArrayList<Employee> list = employeeDAO.getGeneric();
            setTextInput(list.get(index), index);
            label_record.setText("Record: 1 of " + list.size());
        } catch (Exception e) {
            Message(e.getMessage(), 1);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            int index = goTo("previous");
            ArrayList<Employee> list = employeeDAO.getGeneric();
            setTextInput(list.get(index), index);
            label_record.setText("Record: " + (index + 1) + " of " + list.size());
        } catch (Exception e) {
            Message(e.getMessage(), 1);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            int index = goTo("next");
            ArrayList<Employee> list = employeeDAO.getGeneric();
            setTextInput(list.get(index), index);
            label_record.setText("Record: " + (index + 1) + " of " + list.size());
        } catch (Exception e) {
            Message(e.getMessage(), 1);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            int index = goTo("last");
            ArrayList<Employee> list = employeeDAO.getGeneric();
            setTextInput(list.get(index), index);
            label_record.setText("Record: " + list.size() + " of " + list.size());
        } catch (Exception e) {
            Message(e.getMessage(), 1);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void lbl_imgMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_imgMouseClicked
        JFileChooser file = new JFileChooser("C:\\Users\\Asus\\Desktop\\FPT POLYTECHNIC\\Java-FPTPoly - 2\\PS17588_HOHOANGPHU_ASM\\src\\img");
        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.Images", "jpg", "gif", "png");
        file.addChoosableFileFilter(filter);
        int result = file.showSaveDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = file.getSelectedFile();
            pathImg = selectedFile.getAbsolutePath();
            lbl_img.setText("");
            lbl_img.setIcon(ResizeImage(pathImg));
        }
    }//GEN-LAST:event_lbl_imgMouseClicked

    private void btn_newActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_newActionPerformed
        resetAll();
    }//GEN-LAST:event_btn_newActionPerformed

    private void btn_open1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_open1ActionPerformed
        try {
            ArrayList<Employee> list = employeeDAO.getGeneric();
            if (list.isEmpty()) {
                Message("Danh sách đang rỗng!", 1);
            } else {
                String t = JOptionPane.showInputDialog("1. Sắp xếp theo mã\n2. Sắp xếp theo tên\n3. Sắp xếp theo lương");
                if (t != null && !t.equals("")) {
                    employeeDAO.sort(t);
                    showAllData(list);
                    setTextInput(list.get(0), 0);
                    label_record.setText("Record: 1 of " + list.size());
                    employeeDAO.setCurrent(0);
                }
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btn_open1ActionPerformed

    private void table_nvKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_table_nvKeyReleased
        try {
            String manv = model.getValueAt(table_nv.getSelectedRow(), 0).toString();
            String name = model.getValueAt(table_nv.getSelectedRow(), 1).toString();
            String age = model.getValueAt(table_nv.getSelectedRow(), 2).toString();
            String mail = model.getValueAt(table_nv.getSelectedRow(), 3).toString();
            String salary = model.getValueAt(table_nv.getSelectedRow(), 4).toString();
            String gender = model.getValueAt(table_nv.getSelectedRow(), 5).toString();
            String pos = model.getValueAt(table_nv.getSelectedRow(), 6).toString();
            String pathImg = model.getValueAt(table_nv.getSelectedRow(), 7).toString();

            if (checkText(mail, manv, name)
                    && checkNumber(salary, age)
                    && checkMail(mail)
                    && isNumeric(name)
                    && checkPrimaryIdNV(manv, 1)
                    && checkImg()) {
                Employee epl = new Employee();
                epl.setIdNV(manv);
                epl.setNameNV(name);
                epl.setAgeNV(Integer.parseInt(age));
                epl.setEmailNV(mail);
                epl.setGender(gender);
                epl.setSalary(Double.parseDouble(salary));

                if (pos.equals("BAOVE")) {
                    epl.setpEmployee(PEmployee.BAOVE);
                } else if (pos.equals("NHANVIEN")) {
                    epl.setpEmployee(PEmployee.NHANVIEN);
                } else if (pos.equals("TRUONGPHONG")) {
                    epl.setpEmployee(PEmployee.TRUONGPHONG);
                } else if (pos.equals("GIAMDOC")) {
                    epl.setpEmployee(PEmployee.GIAMDOC);
                }

                try {
                    ArrayList<Employee> list = employeeDAO.getGeneric();
                    int index = employeeDAO.getCurrent();
                    if (pathImg == "") {
                        epl.setPathAvt(list.get(index).getPathAvt());
                    } else {
                        epl.setPathAvt(pathImg);
                    }
                } catch (Exception e) {
                    Message(e.getMessage(), 1);
                }

                try {
                    employeeDAO.update(epl);
                    ArrayList<Employee> employees = employeeDAO.getGeneric();
                    showAllData(employees);
                    Message("Cập nhật thành công!", 0);
                    resetAll();
                } catch (Exception e) {
                    Message(e.getMessage(), 1);
                }
            } else {
                try {
                    ArrayList<Employee> list = employeeDAO.getGeneric();
                    showAllData(list);
                } catch (Exception e) {
                    Message(e.getMessage(), 1);
                }
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_table_nvKeyReleased

    public ImageIcon ResizeImage(String ImagePath) {
        ImageIcon MyImage = new ImageIcon(ImagePath);
        Image img = MyImage.getImage();
        Image newImg = img.getScaledInstance(lbl_img.getWidth(), lbl_img.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(newImg);
        return image;
    }

    private int goTo(String direction) {
        int index;
        if (direction.equals("next")) {
            index = employeeDAO.next();
        } else if (direction.equals("last")) {
            index = employeeDAO.last();
        } else if (direction.equals("previous")) {
            index = employeeDAO.previous();
        } else {
            index = employeeDAO.first();
        }
        return index;
    }

    public void setTextInput(Employee t, int k) {
        txt_age.setText(String.valueOf(t.getAgeNV()));
        txt_mail.setText(t.getEmailNV());
        txt_manv.setText(t.getIdNV());
        txt_salary.setText(String.valueOf(t.getSalary()));
        txt_name.setText(t.getNameNV());
        if (k > -1) {
            table_nv.setRowSelectionInterval(k, k);
        }
        lbl_img.setText("");
        lbl_img.setIcon(ResizeImage(t.getPathAvt()));
        cbb_po.setSelectedItem(t.getpEmployee().toString());
        if (t.getGender().equals("Nam")) {
            rdo_nam.setSelected(true);
        } else {
            rdo_nu.setSelected(true);
        }
    }

    public void setRecord(int s, int e) {
        if (s == -1) {
            label_record.setText("Total: " + e);
        } else {
            label_record.setText("Record: " + (s + 1) + " of " + e);
        }
    }

    public void addEmpl() {
        try {
            Employee employee = readFormData(0);
            if (employee.getIdNV() != null) {
                employeeDAO.insert(employee);
                ArrayList<Employee> employees = employeeDAO.getGeneric();
                showAllData(employees);
                Message("Thêm thành công!", 0);
                resetAll();
            }
        } catch (Exception e) {
            Message(e.getMessage() + "Add epl", 1);
        }
    }

    public void updateEmpl() {
        try {
            Employee employee = readFormData(1);
            if (employee.getIdNV() != null) {
                employeeDAO.update(employee);
                ArrayList<Employee> employees = employeeDAO.getGeneric();
                showAllData(employees);
                Message("Cập nhật thành công!", 0);
                resetAll();
            }
        } catch (Exception e) {
            Message(e.getMessage(), 1);
        }
    }

    public Employee readFormData(int t) {
        Employee epl = new Employee();
        String age = txt_age.getText();
        String mail = txt_mail.getText();
        String manv = txt_manv.getText();
        String salary = txt_salary.getText();
        String name = txt_name.getText();
        String gender;
        if (!rdo_nam.isSelected() && !rdo_nu.isSelected()) {
            gender = "";
            Message("Vui lòng chọn giới tính", 1);
            return epl;
        } else {
            gender = (rdo_nam.isSelected()) ? "Nam" : "Nữ";
        }
        String chucvu = cbb_po.getSelectedItem().toString();
        if (checkText(mail, manv, name)
                && checkNumber(salary, age)
                && checkMail(mail)
                && isNumeric(name)
                && checkPrimaryIdNV(manv, t)
                && checkImg()) {
            try {
                epl.setAgeNV(Integer.parseInt(age));
                epl.setEmailNV(mail);
                epl.setIdNV(manv);
                epl.setSalary(Double.parseDouble(salary));
                epl.setNameNV(name);
                epl.setPathAvt(pathImg);
                epl.setGender(gender);

                if (chucvu.equals("BAOVE")) {
                    epl.setpEmployee(PEmployee.BAOVE);
                } else if (chucvu.equals("NHANVIEN")) {
                    epl.setpEmployee(PEmployee.NHANVIEN);
                } else if (chucvu.equals("TRUONGPHONG")) {
                    epl.setpEmployee(PEmployee.TRUONGPHONG);
                } else if (chucvu.equals("GIAMDOC")) {
                    epl.setpEmployee(PEmployee.GIAMDOC);
                }

                if (t == 1) {
                    ArrayList<Employee> list = employeeDAO.getGeneric();
                    int index = employeeDAO.getCurrent();
                    if (pathImg == "") {
                        epl.setPathAvt(list.get(index).getPathAvt());
                    } else {
                        epl.setPathAvt(pathImg);
                    }
                }
            } catch (Exception e) {
                Message(e.getMessage(), 1);
            }
            return epl;
        }

        return epl;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }

    public boolean checkText(String... a) {
        for (String string : a) {
            if (string.equals("")) {
                Message("Vui lòng không để trống giá trị nào!", 1);
                return false;
            }
        }
        return true;
    }

    public boolean checkPrimaryIdNV(String id, int t) {
        try {
            ArrayList<Employee> list = employeeDAO.getGeneric();
            int index = employeeDAO.getCurrent();
            for (Employee employee : list) {
                if (employee.getIdNV().equals(id)) {
                    if (t == 1) {
                        if (!list.get(index).getIdNV().equals(id)) {
                            Message("Mã nhân viên \"" + id + "\" đã tồn tại!", 1);
                            return false;
                        }
                    } else {
                        Message("Mã nhân viên \"" + id + "\" đã tồn tại!", 1);
                        return false;
                    }
                }
            }
            return true;
        } catch (Exception e) {
            Message(e.getMessage(), 1);
            return false;
        }
    }

    public boolean checkImg() {
        if (lbl_img.getIcon() == null) {
            Message("Chưa chọn hình", 1);
            return false;
        }
        return true;
    }

    public boolean isNumeric(String str) {
        if (str.matches("-?\\d+(\\.\\d+)?")) {
            Message("Họ và tên không đúng định dạng!", 1);
        }
        return !str.matches("-?\\d+(\\.\\d+)?");
    }

    public boolean checkNumber(String... a) {
        int p = 0;
        for (String string : a) {
            try {
                double t = Double.parseDouble(string);
                if (p == 1) {
                    if (t < 15 || t > 56) {
                        Message("Vui lòng nhập tuổi từ 16 - 55", 1);
                        return false;
                    }
                } else {
                    if (t < 5000000) {
                        Message("Vui lòng nhập lương từ 5 triệu vnđ trở lên", 1);
                        return false;
                    }
                }
            } catch (Exception e) {
                Message("Tuổi hoặc lương phải nhập số!", 1);
                return false;
            }
            p++;
        }
        return true;
    }

    public boolean checkMail(String email) {
        String regex = "^[a-zA-Z0-9]{1}[a-zA-Z0-9\\.]*[^\\.]@{1}gmail\\.com$";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(email);

        if (!matcher.find()) {
            Message("Vui lòng nhập đúng định dạng mail của google", 1);
            return false;
        }

        return true;
    }

    public void resetAll() {
        txt_age.setText("");
        txt_mail.setText("");
        txt_manv.setText("");
        txt_salary.setText("");
        txt_name.setText("");
        table_nv.clearSelection();
        employeeDAO.setCurrent(-1);
        try {
            ArrayList<Employee> list = employeeDAO.getGeneric();
            setRecord(-1, list.size());
        } catch (Exception e) {
            Message(e.getMessage() + "RS all", 1);
        }
        lbl_img.setIcon(null);
        lbl_img.setText("Chọn hình ảnh đại diện");
        buttonGroup1.clearSelection();
        cbb_po.setSelectedItem("BAOVE");
    }

    public void Message(String message, int index) {
        if (index == 0) {
            JOptionPane.showMessageDialog(this, message, "Message", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, message, "Message", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void showAllData(ArrayList<Employee> list) {
        model.setRowCount(0);
        for (Employee employee : list) {
            model.addRow(new Object[]{
                employee.getIdNV(),
                employee.getNameNV(),
                employee.getAgeNV(),
                employee.getEmailNV(),
                employee.getSalary(),
                employee.getGender(),
                employee.getpEmployee(),
                employee.getPathAvt()
            });
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_del;
    private javax.swing.JButton btn_exit;
    private javax.swing.JButton btn_find;
    private javax.swing.JButton btn_new;
    private javax.swing.JButton btn_open;
    private javax.swing.JButton btn_open1;
    private javax.swing.JButton btn_save;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbb_po;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label_record;
    private javax.swing.JLabel label_time;
    private javax.swing.JLabel lbl_img;
    private javax.swing.JPanel pane_background;
    private javax.swing.JPanel pane_border;
    private javax.swing.JPanel pane_border_btns;
    private javax.swing.JPanel pane_img;
    private javax.swing.JRadioButton rdo_nam;
    private javax.swing.JRadioButton rdo_nu;
    private javax.swing.JTable table_nv;
    private javax.swing.JTextField txt_age;
    private javax.swing.JTextField txt_mail;
    private javax.swing.JTextField txt_manv;
    private javax.swing.JTextField txt_name;
    private javax.swing.JTextField txt_salary;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        while (true) {
            try {
                getTime();
                Thread.sleep(1000);
            } catch (Exception e) {
                break;
            }
        }
    }

    public void getTime() {
        Date now = new Date();
        SimpleDateFormat formater = new SimpleDateFormat();
        formater.applyPattern("hh:mm aa");
        String time = formater.format(now);
        label_time.setText(time.toUpperCase());
    }
}
